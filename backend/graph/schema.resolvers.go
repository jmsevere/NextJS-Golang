package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"backend/graph/model"
	"fmt"
	"time"
)

// SendPing is the resolver for the sendPing field.
func (r *mutationResolver) SendPing(ctx context.Context, input model.NewPing) (*model.Ping, error) {
	// check if timestamp value is missing
	if input.Timestamp.IsZero() {
		return nil, fmt.Errorf("timestamp is required")
	}

	lastPing = &input.Timestamp
	ping := &model.Ping{
		ID:        "latest_ping",
		Timestamp: lastPing,
	}

	PingSubscription.notifySubscribers(ping)

	return ping, nil
}

// GetLastPing is the resolver for the getLastPing field.
func (r *queryResolver) GetLastPing(ctx context.Context) (*model.Ping, error) {
	// making slightly slower to simulate a real-world scenario
	time.Sleep(1 * time.Second)
	if lastPing == nil {
		return nil, nil
	}

	return &model.Ping{
		ID:        "latest_ping",
		Timestamp: lastPing,
	}, nil
}

// LivePing is the resolver for the livePing field.
func (r *subscriptionResolver) LivePing(ctx context.Context) (<-chan *model.Ping, error) {
	id, ch := PingSubscription.registerSubscriber()

	// Cleanup on client disconnect
	go func() {
		<-ctx.Done()
		PingSubscription.unregisterSubscriber(id, ch)
	}()

	return ch, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
